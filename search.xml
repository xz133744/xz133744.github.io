<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue3 与 Vue2 区别</title>
    <url>/post/ec9655cc.html</url>
    <content><![CDATA[<font face="ZhuZiAWan" size=3>

<h1 id="Vue3-与-Vue2-区别详述"><a href="#Vue3-与-Vue2-区别详述" class="headerlink" title="Vue3 与 Vue2 区别详述"></a>Vue3 与 Vue2 区别详述</h1><h2 id="1-生命周期"><a href="#1-生命周期" class="headerlink" title="1. 生命周期"></a>1. 生命周期</h2><p>对于生命周期来说，整体上变化不大，只是大部分生命周期钩子名称上 + “on”，功能上是类似的。不过有一点需要注意，Vue3 在组合式API（Composition API，下面展开）中使用生命周期钩子时需要先引入，而 Vue2 在选项API（Options API）中可以直接调用生命周期钩子，如下所示。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue3</span></span><br><span class="line">&lt;script setup&gt;     </span><br><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;   <span class="comment">// 使用前需引入生命周期钩子</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 可将不同的逻辑拆开成多个onMounted，依然按顺序执行，不会被覆盖</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// vue2</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">     </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;         </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;   <span class="comment">// 直接调用生命周期钩子            </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// ...         </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,           </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> </span><br></pre></td></tr></table></figure>

<p>常用生命周期对比如下表所示。</p>
<table>
<thead>
<tr>
<th>vue2</th>
<th>vue3</th>
</tr>
</thead>
<tbody><tr>
<td>beforeCreate</td>
<td></td>
</tr>
<tr>
<td>created</td>
<td></td>
</tr>
<tr>
<td>beforeMount</td>
<td>onBeforeMount</td>
</tr>
<tr>
<td>mounted</td>
<td>onBeforeMount</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>onBeforeMount</td>
</tr>
<tr>
<td>updated</td>
<td>onUpdated</td>
</tr>
<tr>
<td>beforeDestroy</td>
<td>onBeforeUnmount</td>
</tr>
<tr>
<td>destroyed</td>
<td>onUnmounted</td>
</tr>
</tbody></table>
<div class="note info modern"><p>Tips： setup 是围绕 beforeCreate 和 created 生命周期钩子运行的，所以不需要显式地去定义。</p>
</div>

<h2 id="2-多根节点"><a href="#2-多根节点" class="headerlink" title="2. 多根节点"></a>2. 多根节点</h2><p>Vue2中，在模板中如果使用多个根节点时会报错，如下所示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// vue2中在template里存在多个根节点会报错</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">// 只能存在一个根节点，需要用一个<span class="tag">&lt;<span class="name">div</span>&gt;</span>来包裹着</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是，Vue3 支持多个根节点，也就是 fragment。即以下多根节点的写法是被允许的。根节点不再需要用<code>&lt;div&gt;</code>包裹.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-Composition-API"><a href="#3-Composition-API" class="headerlink" title="3. Composition API"></a>3. Composition API</h2><p>组合式API（Composition API）是vue3最大的特色。</p>
<p>Vue2 是选项API（Options API），一个逻辑会散乱在文件不同位置（data、props、computed、watch、生命周期钩子等），导致代码的可读性变差。当需要修改某个逻辑时，需要上下来回跳转文件位置。</p>
<p>Vue3 组合式API（Composition API）则很好地解决了这个问题，可将同一逻辑的内容写到一起，增强了代码的可读性、内聚性，其还提供了较为完美的逻辑复用性方案。</p>
<h2 id="4-异步组件（Suspense）"><a href="#4-异步组件（Suspense）" class="headerlink" title="4. 异步组件（Suspense）"></a>4. 异步组件（Suspense）</h2><p>Vue3 提供 Suspense 组件，允许程序在等待异步组件加载完成前渲染兜底的内容，如 loading ，使用户的体验更平滑。使用它，需在模板中声明，并包括两个命名插槽：default 和 fallback。Suspense 确保加载完异步内容时显示默认插槽，并将 fallback 插槽用作加载状态。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tempalte</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">suspense</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">List</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        Loading...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">suspense</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-Teleport"><a href="#5-Teleport" class="headerlink" title="5. Teleport"></a>5. Teleport</h2><p>Vue3 提供 Teleport 组件可将部分 DOM 移动到 Vue app 之外的位置。比如项目中常见的 Dialog 弹窗。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogVisible = true&quot;</span>&gt;</span>显示弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;dialogVisible&quot;</span>&gt;</span></span><br><span class="line">    我是弹窗，我直接移动到了body标签下</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-响应式原理"><a href="#6-响应式原理" class="headerlink" title="6. 响应式原理"></a>6. 响应式原理</h2><p>Vue2 响应式原理基础是 Object.defineProperty；Vue3 响应式原理基础是 Proxy。</p>
<p>Object.defineProperty 基本用法：直接在一个对象上定义新的属性或修改现有的属性，并返回对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;leo&#x27;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,   <span class="comment">// 可枚举（是否可通过 for...in 或 Object.keys() 进行访问）</span></span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,   <span class="comment">// 可配置（是否可使用 delete 删除，是否可再次设置属性）</span></span><br><span class="line">  <span class="comment">// value: &#x27;&#x27;,   // 任意类型的值，默认undefined</span></span><br><span class="line">  <span class="comment">// writable: true,   // 可重写</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    name = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<div class="note info modern"><p>Tips： <code>writable</code> 和 <code>value</code> 与 <code>getter</code> 和 <code>setter</code> 不共存。</p>
</div>

<p><strong>vue2核心源码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="comment">// 一 key 一个 dep</span></span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取 key 的属性描述符，发现它是不可配置对象的话直接 return</span></span><br><span class="line">  <span class="keyword">const</span> property = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, key)</span><br><span class="line">  <span class="keyword">if</span> (property &amp;&amp; property.<span class="property">configurable</span> === <span class="literal">false</span>) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取 getter 和 setter，并获取 val 值</span></span><br><span class="line">  <span class="keyword">const</span> getter = property &amp;&amp; property.<span class="property">get</span></span><br><span class="line">  <span class="keyword">const</span> setter = property &amp;&amp; property.<span class="property">set</span></span><br><span class="line">  <span class="keyword">if</span>((!getter || setter) &amp;&amp; <span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">2</span>) &#123; val = obj[key] &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 递归处理，保证对象中所有 key 被观察</span></span><br><span class="line">  <span class="keyword">let</span> childOb = <span class="title function_">observe</span>(val)</span><br><span class="line">  </span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// get 劫持 obj[key] 的 进行依赖收集</span></span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> <span class="title function_">reactiveGetter</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.<span class="title function_">call</span>(obj) : val</span><br><span class="line">      <span class="keyword">if</span>(<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">        <span class="comment">// 依赖收集</span></span><br><span class="line">        dep.<span class="title function_">depend</span>()</span><br><span class="line">        <span class="keyword">if</span>(childOb) &#123;</span><br><span class="line">          <span class="comment">// 针对嵌套对象，依赖收集</span></span><br><span class="line">          childOb.<span class="property">dep</span>.<span class="title function_">depend</span>()</span><br><span class="line">          <span class="comment">// 触发数组响应式</span></span><br><span class="line">          <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">            <span class="title function_">dependArray</span>(value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// set 派发更新 obj[key]</span></span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> <span class="title function_">reactiveSetter</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span>(setter) &#123;</span><br><span class="line">      setter.<span class="title function_">call</span>(obj, newVal)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      val = newVal</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新值设置响应式</span></span><br><span class="line">    childOb = <span class="title function_">observe</span>(val)</span><br><span class="line">    <span class="comment">// 依赖通知更新</span></span><br><span class="line">    dep.<span class="title function_">notify</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note danger flat"><p>vue2响应式的缺陷是无法监听对象或数组新增、删除的元素。</p>
</div>

<hr>
<p>vue3采用es6新特性Proxy Proxy ，通过第2个参数 handler 拦截目标对象的行为。相较于 Object.defineProperty 提供语言全范围的响应能力，消除了局限性。</p>
<p>vue3 的源码 reactive.ts 文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createReactiveObject</span>(<span class="params">target, isReadOnly, baseHandlers, collectionHandlers, proxyMap</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// collectionHandlers: 处理Map、Set、WeakMap、WeakSet</span></span><br><span class="line">  <span class="comment">// baseHandlers: 处理数组、对象</span></span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">    target,</span><br><span class="line">    targetType === <span class="title class_">TargetType</span>.<span class="property">COLLECTION</span> ? collectionHandlers : baseHandlers</span><br><span class="line">  )</span><br><span class="line">  proxyMap.<span class="title function_">set</span>(target, proxy)</span><br><span class="line">  <span class="keyword">return</span> proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-虚拟DOM"><a href="#7-虚拟DOM" class="headerlink" title="7. 虚拟DOM"></a>7. 虚拟DOM</h2><p>Vue3 相比于 Vue2，虚拟DOM上增加 patchFlag 字段。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>vue3虚拟DOM讲解<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>今天天气真不错<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>渲染函数如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createElementVNode <span class="keyword">as</span> _createElementVNode, toDisplayString <span class="keyword">as</span> _toDisplayString, openBlock <span class="keyword">as</span> _openBlock, createElementBlock <span class="keyword">as</span> _createElementBlock, pushScopeId <span class="keyword">as</span> _pushScopeId, popScopeId <span class="keyword">as</span> _popScopeId &#125; <span class="keyword">from</span> vue</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">_withScopeId</span> = n =&gt; (<span class="title function_">_pushScopeId</span>(scope-id),n=<span class="title function_">n</span>(),<span class="title function_">_popScopeId</span>(),n)</span><br><span class="line"><span class="keyword">const</span> _hoisted_1 = &#123; <span class="attr">id</span>: app &#125;</span><br><span class="line"><span class="keyword">const</span> _hoisted_2 = <span class="comment">/*#__PURE__*/</span> <span class="title function_">_withScopeId</span>(<span class="function">() =&gt;</span> <span class="comment">/*#__PURE__*/</span><span class="title function_">_createElementVNode</span>(h1, <span class="literal">null</span>, vue3虚拟<span class="variable constant_">DOM</span>讲解, -<span class="number">1</span> <span class="comment">/* HOISTED */</span>))</span><br><span class="line"><span class="keyword">const</span> _hoisted_3 = <span class="comment">/*#__PURE__*/</span> <span class="title function_">_withScopeId</span>(<span class="function">() =&gt;</span> <span class="comment">/*#__PURE__*/</span><span class="title function_">_createElementVNode</span>(p, <span class="literal">null</span>, 今天天气真不错, -<span class="number">1</span> <span class="comment">/* HOISTED */</span>))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="title function_">_openBlock</span>(), <span class="title function_">_createElementBlock</span>(div, _hoisted_1, [</span><br><span class="line">    _hoisted_2,</span><br><span class="line">    _hoisted_3,</span><br><span class="line">    <span class="title function_">_createElementVNode</span>(div, <span class="literal">null</span>, <span class="title function_">_toDisplayString</span>(_ctx.<span class="property">name</span>), <span class="number">1</span> <span class="comment">/* TEXT */</span>)</span><br><span class="line">  ]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>字段类型情况：1 代表节点为动态文本节点，那在 diff 过程中，只需比对文本对容，无需关注 class、style等。除此之外，发现所有的静态节点（HOISTED 为 -1），都保存为一个变量进行静态提升，可在重新渲染时直接引用，无需重新创建。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// patchFlags 字段类型列举</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> enum <span class="title class_">PatchFlags</span> &#123; </span><br><span class="line">  <span class="variable constant_">TEXT</span> = <span class="number">1</span>,   <span class="comment">// 动态文本内容</span></span><br><span class="line">  <span class="variable constant_">CLASS</span> = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,   <span class="comment">// 动态类名</span></span><br><span class="line">  <span class="variable constant_">STYLE</span> = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,   <span class="comment">// 动态样式</span></span><br><span class="line">  <span class="variable constant_">PROPS</span> = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,   <span class="comment">// 动态属性，不包含类名和样式</span></span><br><span class="line">  <span class="variable constant_">FULL_PROPS</span> = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,   <span class="comment">// 具有动态 key 属性，当 key 改变，需要进行完整的 diff 比较</span></span><br><span class="line">  <span class="variable constant_">HYDRATE_EVENTS</span> = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,   <span class="comment">// 带有监听事件的节点</span></span><br><span class="line">  <span class="variable constant_">STABLE_FRAGMENT</span> = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,   <span class="comment">// 不会改变子节点顺序的 fragment</span></span><br><span class="line">  <span class="variable constant_">KEYED_FRAGMENT</span> = <span class="number">1</span> &lt;&lt; <span class="number">7</span>,   <span class="comment">// 带有 key 属性的 fragment 或部分子节点</span></span><br><span class="line">  <span class="variable constant_">UNKEYED_FRAGMENT</span> = <span class="number">1</span> &lt;&lt; <span class="number">8</span>,   <span class="comment">// 子节点没有 key 的fragment</span></span><br><span class="line">  <span class="variable constant_">NEED_PATCH</span> = <span class="number">1</span> &lt;&lt; <span class="number">9</span>,   <span class="comment">// 只会进行非 props 的比较</span></span><br><span class="line">  <span class="variable constant_">DYNAMIC_SLOTS</span> = <span class="number">1</span> &lt;&lt; <span class="number">10</span>,   <span class="comment">// 动态的插槽</span></span><br><span class="line">  <span class="variable constant_">HOISTED</span> = -<span class="number">1</span>,   <span class="comment">// 静态节点，diff阶段忽略其子节点</span></span><br><span class="line">  <span class="variable constant_">BAIL</span> = -<span class="number">2</span>   <span class="comment">// 代表 diff 应该结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-事件缓存"><a href="#8-事件缓存" class="headerlink" title="8. 事件缓存"></a>8. 事件缓存</h2><p>了解React的同学知道，使用 React 时，性能优化的其中一点就是<strong>将事件侦听方法手动进行缓存</strong>，避免更新组件时重复创建。而 Vue3 直接替我们做了这一步。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleBtnClick&quot;</span>&gt;</span>666<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编译后的dom:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _hoisted_1 = &#123; <span class="attr">id</span>: <span class="string">&quot;app&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="title function_">_openBlock</span>(), <span class="title function_">_createElementBlock</span>(<span class="string">&quot;div&quot;</span>, _hoisted_1, [</span><br><span class="line">    <span class="title function_">_createElementVNode</span>(<span class="string">&quot;button&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">onClick</span>: _cache[<span class="number">0</span>] || (_cache[<span class="number">0</span>] = <span class="function">(<span class="params">...args</span>) =&gt;</span> (_ctx.<span class="property">handleBtnClick</span> &amp;&amp; _ctx.<span class="title function_">handleBtnClick</span>(...args)))</span><br><span class="line">    &#125;, <span class="string">&quot;666&quot;</span>)</span><br><span class="line">  ]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-Diff算法优化"><a href="#9-Diff算法优化" class="headerlink" title="9.Diff算法优化"></a>9.Diff算法优化</h2><p>vue2.x中的虚拟dom是进行<strong>全量的对比</strong>，在运行时会对所有节点生成一个虚拟节点树，当页面数据发生变更好，会遍历判断virtual dom所有节点（包括一些不会变化的节点）有没有发生变化；虽然说diff算法确实减少了多DOM节点的直接操作，但是这个<strong>减少是有成本的</strong>，如果是复杂的大型项目，必然存在很复杂的父子关系的VNode,<strong>而Vue2.x的diff算法，会不断地递归调用 patchVNode，不断堆叠而成的几毫秒，最终就会造成 VNode 更新缓慢</strong>。</p>
<p>在Vue3.0中，在这个模版编译时，编译器会在动态标签末尾加上 &#x2F;* Text*&#x2F; PatchFlag。<strong>也就是在生成VNode的时候，同时打上标记，在这个基础上再进行核心的diff算法</strong>并且 PatchFlag 会标识动态的属性类型有哪些，比如这里 的TEXT 表示只有节点中的文字是动态的。而patchFlag的类型也很多,其中大致可以分为两类：</p>
<ul>
<li>当 patchFlag 的值「大于」 0 时，代表所对应的元素在 patchVNode 时或 render 时是可以被优化生成或更新的。</li>
<li>当 patchFlag 的值「小于」 0 时，代表所对应的元素在 patchVNode 时，是需要被 full diff，即进行递归遍历 VNode tree 的比较更新过程。</li>
</ul>
<h2 id="10-打包优化"><a href="#10-打包优化" class="headerlink" title="10. 打包优化"></a>10. 打包优化</h2><p>Tree-shaking：模块打包 webpack、rollup 等中的概念。移除 JavaScript 上下文中未引用的代码。主要依赖于 import 和 export 语句，用来检测代码模块是否被导出、导入，且被 JavaScript 文件使用。</p>
<p>以 nextTick 为例子，在 Vue2 中，全局API暴露在Vue实例上，即使未使用，也无法通过 tree-shaking 进行消除。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 一些和DOM有关的东西</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Vue3 中针对全局和内部的API进行了重构，并考虑到 tree-shaking 的支持。因此，全局API现在只能作为ES模块构建的命名导出进行访问。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; nextTick &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;   <span class="comment">// 显式导入</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 一些和DOM有关的东西</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>通过这一更改，只要模块绑定器支持 tree-shaking，则Vue应用程序中未使用的 api 将从最终的捆绑包中消除，获得最佳文件大小。</p>
<p>受此更改影响的全局API如下所示。</p>
<ul>
<li>Vue.nextTick</li>
<li>Vue.observable （用 Vue.reactive 替换）</li>
<li>Vue.version</li>
<li>Vue.compile （仅全构建）</li>
<li>Vue.set （仅兼容构建）</li>
<li>Vue.delete （仅兼容构建）</li>
</ul>
<p>内部API也有诸如 transition、v-model 等标签或者指令被命名导出。只有在程序真正使用才会被捆绑打包。Vue3 将所有运行功能打包也只有约22.5kb，比 Vue2 轻量很多。</p>
<h2 id="11-TypeScript支持"><a href="#11-TypeScript支持" class="headerlink" title="11. TypeScript支持"></a>11. TypeScript支持</h2><p>Vue3 由 TypeScript 重写，相对于 Vue2 有更好的 TypeScript 支持。</p>
<ul>
<li>Vue2 Options API 中 option 是个简单对象，而 TypeScript 是一种类型系统，面向对象的语法，不是特别匹配。</li>
<li>Vue2 需要vue-class-component强化vue原生组件，也需要vue-property-decorator增加更多结合Vue特性的装饰器，写法比较繁琐。</li>
</ul>
</font>
]]></content>
      <categories>
        <category>vue2</category>
        <category>vue3</category>
      </categories>
      <tags>
        <tag>typescript</tag>
        <tag>vue3</tag>
        <tag>vue2</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown图片路径问题及git bash无法中断问题</title>
    <url>/post/1d96212d.html</url>
    <content><![CDATA[<font face="ZhuZiAWan" size=3>

<h1 id="一、markdown图片相对路径问题"><a href="#一、markdown图片相对路径问题" class="headerlink" title="一、markdown图片相对路径问题"></a>一、markdown图片相对路径问题</h1><p>Typora本地插入图片的路径有两种方式：一个是绝对路径，一个是相对路径（相对于当前文件所在的路径）</p>
<p>Hexo通过<code>hexo-renderer-marked</code>插件实现了对markdown语法的支持，其中默认插入图片的方式为 <code>![](/images/image.jpg)</code> ，它是一个相对路径（相对于Hexo工作目录下的 <code>source</code> 文件夹）的方式。为了方便相对路径的引用，hexo提供了一个配置属性：<code>post_asset_folder</code>,在hexo根目录下的配置文件<code>_config.yml</code>中将<code>post_asset_folder</code>设置为<code>true</code> ：    </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>该功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹和一个markdown文件。例如，我使用 <code>hexo new blog</code> 创建了一篇文章 <code>blog.md</code> ，会同时在该文章文件所在的路径上创建文件夹 <code>blog/</code>，我们在该文件夹里面添加图片 <code>blog/my.png</code>，这时我们在 <code>blog.md</code> 文件中插入该图片的方式为 <code>![](my.png)</code> 就可以了。</p>
<p>这个资源文件夹名与这个文章文件名相同。将所有与你的文章有关的资源（如图片）放在这个关联文件夹中之后，你可以通过相对路径来引用它们。</p>
<p>但在typora中不使用<code>![](my.png)</code>这种图片格式，typora会将其转化为<code>&#123;% asset_img my.png %&#125;</code>形式，所有在typora使用相对路径引入图片需要借助插件完成，网上大多数资料推荐的插件是<code>hexo-asset-image</code>，但我清测没有效，我使用的是<code>hexo-image-link</code>插件，是将markdown图片路径转换为asset_img语法，使得图片能够同时显示在typora和hexo上。</p>
<p>只需要两步：</p>
<h3 id="1-安装插件hexo-image-link"><a href="#1-安装插件hexo-image-link" class="headerlink" title="1.安装插件hexo-image-link"></a>1.安装插件<code>hexo-image-link</code></h3><p>根目录git bash输入命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-image-link --save</span><br></pre></td></tr></table></figure>

<h3 id="2-打开Hexo资源管理配置开关"><a href="#2-打开Hexo资源管理配置开关" class="headerlink" title="2.打开Hexo资源管理配置开关"></a>2.打开Hexo资源管理配置开关</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<p>展示：</p>
<p>因为我的typora设置： 格式-&gt;图像-&gt;设置图片根目录，所以我此时的引用不需要文件夹路径</p>
<p>此时我的路径是<code>/2038608.jpg</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">风景</span>](<span class="link">/2038608.jpg</span>)</span><br></pre></td></tr></table></figure>

<p>接下来你可以看到本篇博客显示如下图片：</p>
<img src="/post/1d96212d/2038608.jpg" class="" title="风景">

<h1 id="二、Git-Bash中按下Ctrl-C无法中断hexo-s的解决方法"><a href="#二、Git-Bash中按下Ctrl-C无法中断hexo-s的解决方法" class="headerlink" title="二、Git Bash中按下Ctrl+C无法中断hexo s的解决方法"></a>二、Git Bash中按下Ctrl+C无法中断hexo s的解决方法</h1><p>在git bash启动<code>hexo server</code>后经常出现ctrl+c无法关闭服务器的情况，这时我们只需要打开<code>cmd</code>，然后输入<code>taskkill /F /IM node.exe</code>，</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">taskkill</span> /F /IM node.exe</span><br></pre></td></tr></table></figure>

<p>即可关闭所有node脚本占用的端口从而关闭服务器。</p>
</font>
]]></content>
      <categories>
        <category>hexo</category>
        <category>markdown</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>报错日志：安卓插件引入和项目版本兼容问题</title>
    <url>/post/3b7f2b28.html</url>
    <content><![CDATA[<font face="ZhuZiAWan" size=3>

<h1 id="一、Android-Studio项目插件引入"><a href="#一、Android-Studio项目插件引入" class="headerlink" title="一、Android Studio项目插件引入"></a>一、Android Studio项目插件引入</h1><p>在引入别人的安卓文件时发生了报错</p>
<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><div class="note danger modern"><p>Caused by: org.gradle.api.internal.plugins.PluginApplicationException: Failed to apply plugin ‘com.android.internal.application’.</p>
</div>

<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>在<code>gradle.properties</code>添加<code>android.overridePathCheck=true</code>即可</p>
<img src="/post/3b7f2b28/1.png" class="" title="image-20230524144658745">

<img src="/post/3b7f2b28/2.png" class="" title="image-20230524144751980">

<p>引入后点击Try Again继续下载依赖包</p>
<p><img src="/post/3b7f2b28/3.png" alt="image-20230524145110593"></p>
<h1 id="二、项目版本不兼容问题"><a href="#二、项目版本不兼容问题" class="headerlink" title="二、项目版本不兼容问题"></a>二、项目版本不兼容问题</h1><p>引入插件后继续下载sdk时发生报错</p>
<div class="note danger modern"><p>The project is using an incompatible version (AGP 8.0.1) of the Android Gradle plugin. Latest supported version is AGP 7.4.2</p>
</div>

<p>意思是：</p>
<div class="note info modern"><p>使用该 “ Android Studio Dolphin “ 版本的 Android Studio , 最高只能配置的 Android Gradle 插件的版本为 7.3.1 ;</p>
</div>

<p>这是因为他用Mac 创建了该项目，而在 Mac 中创建的项目 , 自动生成的 Android Gradle 插件 版本是 7.4.2 , 说明 Mac 中项目版本号是 “ Electric Eel | 2022.1.1 “ 或者更高的版本 ;</p>
<p>将 <code>build.gradle</code> 构建脚本中的 <code>com.android.application</code> 插件 和 <code>com.android.library</code> 插件的版本修改为 <code>7.3.1</code> , 即可完成编译 ;</p>
<p>找到 <code>build.gradle</code>  :</p>
<p><img src="/post/3b7f2b28/4.png" alt="image-20230524150433874"></p>
<p>将两个版本号都修改为<code>7.3.1</code>,点击Try Again可以继续执行依赖</p>
<p><img src="/post/3b7f2b28/5.png" alt="image-20230524151121493"></p>
</font>
]]></content>
      <categories>
        <category>报错</category>
        <category>安卓</category>
      </categories>
      <tags>
        <tag>报错</tag>
        <tag>安卓</tag>
      </tags>
  </entry>
  <entry>
    <title>Vercel+imsyy部署个人博客home页面</title>
    <url>/post/6b62e9ba.html</url>
    <content><![CDATA[<font face="ZhuZiAWan" size=3>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>hexo</strong>框架的butterfly首页看腻了，正好发现一个好看简洁的博客首页主题<strong>imsyy</strong>，本篇博客记录我部署<strong>imsyy</strong>的过程。</p>
<h1 id="fork仓库"><a href="#fork仓库" class="headerlink" title="fork仓库"></a>fork仓库</h1><p><strong>imsyy</strong>主题是<strong>github</strong>上的开源项目，项目地址：<strong><a href="https://github.com/imsyy/home">https://github.com/imsyy/home</a></strong></p>
<a class="btn-beautify blue larger" href="https://github.com/imsyy/home" 
  title="imsyy/home"><i class="far fa-hand-point-right"></i><span>imsyy/home</span></a>

<img src="/post/6b62e9ba/1.png" class="" title="image-20230527163145711">

<p>点击<strong>fork</strong>之后添加仓库名，该项目就被复制到你的<strong>github</strong>中了</p>
<h1 id="部署vercel"><a href="#部署vercel" class="headerlink" title="部署vercel"></a>部署vercel</h1><div class="note none blue flat"><p>登录你的<strong>vercel</strong>，进入到<strong>overview</strong>页面，点击<code>Add New Project</code>创建一个新项目</p>
</div>

<img src="/post/6b62e9ba/2.png" class="" title="image-20230527163542233">

<div class="note none blue flat"><p>选择刚刚复刻的<strong>imsyy-home</strong>项目</p>
</div>

<img src="/post/6b62e9ba/3.png" class="" title="image-20230527163712714">

<div class="note none blue flat"><p>什么都不用改，直接<strong>Deploy</strong></p>
</div>

<img src="/post/6b62e9ba/4.png" class="" title="image-20230527163939159">

<div class="note none blue flat"><p>之后等待部署成功就行了</p>
</div>

<hr>
<div class="note danger flat"><p>vercel在国内会被墙，所以需要绑定一个域名来正常访问</p>
</div>

<img src="/post/6b62e9ba/5.png" class="" title="image-20230527164325263">

<div class="note none blue flat"><p>打开<strong>域名管理面板</strong>，添加<strong>域名解析</strong>，我们只需添加一个二级域名即可，<strong>主机记录</strong>为<code>imsyy</code>，可以随意设置，<strong>记录类型</strong>为<code>CNAME</code>，<strong>记录值</strong>为<code>vercel-dns.com.</code></p>
</div>

<img src="/post/6b62e9ba/6.png" class="" title="image-20230527170014755">

<div class="note none blue flat"><p>随后回到<strong>vercel</strong>中，添加域名<code>imsyy+你的域名</code>,然后等待解析完成之后就可以使用该域名访问到一个初始化的<strong>imsyy</strong>页面啦</p>
</div>

<img src="/post/6b62e9ba/7.png" class="" title="image-20230527170327736">

<hr>
<h1 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h1><h2 id="先将项目copy到本地"><a href="#先将项目copy到本地" class="headerlink" title="先将项目copy到本地"></a>先将项目copy到本地</h2><p>打开<strong>github</strong>，进入<strong>imsyy</strong>项目所在的储存库，你可以选择<code>Download ZIP</code>直接将项目下载成一个压缩包，或者复制<strong>SSH</strong>，使用<strong>git</strong>拉取整个项目</p>
<div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">直接下载压缩包</button></li><li class="tab"><button type="button" data-href="#-2">git拉取</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><div class="note none blue flat"><p>点击Download Zip下载并在本地解压打开即可</p>
</div>

<img src="/post/6b62e9ba/8.png" class="" title="image-20230527170327737"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><div class="note none blue flat"><p>复制你的SSH密钥，在你需要保存的文件根目录右键打开<code>GIT BASH</code>，输入<code>git clone 你的SSH密钥</code>即可</p>
</div>

<img src="/post/6b62e9ba/image-20230527172314585.png" class="" title="image-20230527172314585"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="打开本地预览"><a href="#打开本地预览" class="headerlink" title="打开本地预览"></a>打开本地预览</h2><div class="note none blue flat"><p>在这之前需要运行本地预览</p>
</div>



<p>本地预览需要我们在本地安装好<code>node.js</code>环境以及<code>npm包管理器</code>，随后<a href="https://so.csdn.net/so/search?q=%E5%AE%89%E8%A3%85yarn&spm=1001.2101.3001.7020">安装yarn</a>，如你的电脑已经安装过<code>yarn</code>可以跳过这一步</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install yarn</span><br></pre></td></tr></table></figure>

<p>安装完成后执行<code>yarn install</code>安装依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure>

<p>依赖项搞定了，用<code>dev</code>查看预览页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn dev</span><br></pre></td></tr></table></figure>

<div class="note none blue flat"><p>默认端口是<strong>localhost:3000</strong>，浏览器打开即可预览初始化的<strong>imsyy</strong>页面</p>
</div>

<img src="/post/6b62e9ba/image-20230527173229265.png" class="" title="image-20230527173229265">

<hr>
<h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><h2 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h2><p>如果你不需要社交链接，那么你可以打开<strong>根目录：</strong><code>\src\components\SocialLinks</code>下的<code>index.vue</code>，然后将里面的<code>&lt;template&gt;</code>里的内容注释掉</p>
<img src="/post/6b62e9ba/image-20230527202035636.png" class="" title="image-20230527202035636">

<p>如果要添加或修改社交链接，那么你需要进入到<strong>根目录</strong>下的<code>public</code>文件夹中找到<code>socialLinks.json</code>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Github&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/icon/github.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;去 Github 看看&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/你的github&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BiliBili&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/icon/bilibili.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(゜-゜)つロ 干杯 ~&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://space.bilibili.com/你的哔哩哔哩账号&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;QQ&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/icon/qq.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;有什么事吗&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://res.abeim.cn/api/qq/?qq=你的QQ&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Email&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/icon/email.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;来封 Email ~&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的邮箱&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Telegram&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/icon/telegram.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你懂的 ~&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的Telegram地址&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>社交链接会在这里展示出来：</p>
<img src="/post/6b62e9ba/image-20230527203611490.png" class="" title="image-20230527203611490">

<h2 id="添加你的基本信息"><a href="#添加你的基本信息" class="headerlink" title="添加你的基本信息"></a>添加你的基本信息</h2><p>打开<strong>根目录</strong>下的<code>.env</code>配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">VITE_SITE_NAME</span> <span class="string">=</span> <span class="string">&quot;小铭の博客&quot;</span>  <span class="comment"># 站点名称</span></span><br><span class="line"><span class="string">VITE_SITE_ANTHOR</span> <span class="string">=</span> <span class="string">&quot;小铭&quot;</span>   <span class="comment"># 站点作者</span></span><br><span class="line"><span class="string">VITE_SITE_KEYWORDS</span> <span class="string">=</span> <span class="string">&quot;小铭,个人博客&quot;</span> <span class="comment"># 站点关键词</span></span><br><span class="line"><span class="string">VITE_SITE_DES</span> <span class="string">=</span> <span class="string">&quot;一些乱七八糟的记录&quot;</span> <span class="comment"># 站点描述</span></span><br><span class="line"><span class="string">VITE_SITE_URL</span> <span class="string">=</span> <span class="string">&quot;xiaoming.site&quot;</span>  <span class="comment"># 站点地址(首页头像旁的文字)</span></span><br><span class="line"><span class="string">VITE_SITE_LOGO</span> <span class="string">=</span> <span class="string">&quot;/images/icon/ico.jpg&quot;</span> <span class="comment"># 站点 LOGO</span></span><br></pre></td></tr></table></figure>

<div class="note danger flat"><p><font color='red' size=4>注意：</font>首页的logo字母是经过压缩的，使用其他字母会变成默认字体(只有<strong>imsyy.top</strong>和<strong>hello，world</strong>里的这些字母有样式),如果需要所有字母的样式可以去作者的<strong>github</strong>的项目首页下载</p>
<p><a class="btn-beautify blue larger" href="https://github.com/imsyy/home" 
  title="点击去下载完整字体"><i class="far fa-hand-point-right"></i><span>点击去下载完整字体</span></a></p>
</div>

<h2 id="修改建站日期"><a href="#修改建站日期" class="headerlink" title="修改建站日期"></a>修改建站日期</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建站日期</span></span><br><span class="line"><span class="comment">## 请按照 YYYY-MM-DD 格式填写</span></span><br><span class="line"><span class="string">VITE_SITE_START</span> <span class="string">=</span> <span class="string">&quot;2023-5-8&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="添加音乐播放器"><a href="#添加音乐播放器" class="headerlink" title="添加音乐播放器"></a>添加音乐播放器</h2><p>这里我们只需要修改歌曲服务器和播放ID就行</p>
<p>在浏览器打开你的网易云或者QQ音乐的，选择一个歌单，将网址中的id复制进来即可替换歌单</p>
<div class="note none blue flat"><p><strong>建议选择网易云，无论是国内国外，网易云的播放服务器都更稳定</strong></p>
</div>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 歌曲 API 地址</span></span><br><span class="line"><span class="comment">## 请参照 https://github.com/xizeyoupan/Meting-API#deno-deploy 进行 API 服务部署</span></span><br><span class="line"><span class="comment">## 此处提供的服务可能会超量从而无法访问，请自行部署</span></span><br><span class="line"><span class="comment">## 若使用QQ音乐歌单，歌曲数量最好不要超出50首</span></span><br><span class="line"><span class="comment">## 备用：https://api.wuenci.com/meting/api/</span></span><br><span class="line"><span class="string">VITE_SONG_API</span> <span class="string">=</span> <span class="string">&quot;https://api-meting.imsyy.top/api&quot;</span></span><br><span class="line"><span class="comment"># 歌曲服务器 ( netease-网易云, tencent-qq音乐 )</span></span><br><span class="line"><span class="string">VITE_SONG_SERVER</span> <span class="string">=</span> <span class="string">&quot;netease&quot;</span></span><br><span class="line"><span class="comment"># 播放类型 ( song-歌曲, playlist-播放列表, album-专辑, search-搜索, artist-艺术家 )</span></span><br><span class="line"><span class="string">VITE_SONG_TYPE</span> <span class="string">=</span> <span class="string">&quot;playlist&quot;</span></span><br><span class="line"><span class="comment"># 播放 ID</span></span><br><span class="line"><span class="string">VITE_SONG_ID</span> <span class="string">=</span> <span class="string">&quot;5331617474&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="简介文本"><a href="#简介文本" class="headerlink" title="简介文本"></a>简介文本</h2><p>修改首页的一些简介</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简介文本</span></span><br><span class="line"><span class="string">VITE_DESC_HELLO</span> <span class="string">=</span> <span class="string">&quot;Hello Blog !&quot;</span></span><br><span class="line"><span class="string">VITE_DESC_TEXT</span> <span class="string">=</span> <span class="string">&quot;黄师塔前江水东，春光懒困倚微风。&quot;</span></span><br><span class="line"><span class="string">VITE_DESC_HELLO_OTHER</span> <span class="string">=</span> <span class="string">&quot;less times !&quot;</span></span><br><span class="line"><span class="string">VITE_DESC_TEXT_OTHER</span> <span class="string">=</span> <span class="string">&quot;岁月不居，时节如流。&quot;</span></span><br></pre></td></tr></table></figure>

<img src="/post/6b62e9ba/image-20230527215209845.png" class="" title="image-20230527215209845">

<p>点击文本块后：</p>
<img src="/post/6b62e9ba/image-20230527215309543.png" class="" title="image-20230527215309543">

<h2 id="天气服务"><a href="#天气服务" class="headerlink" title="天气服务"></a>天气服务</h2><p>因为作者的天气服务key已经超量，建议自行前往高德开放平台注册一个<strong>key</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 天气 Key</span></span><br><span class="line"><span class="comment">## 请前往高德开放平台注册 Web服务 Key（免费的）</span></span><br><span class="line"><span class="comment">## 请各位大佬行行好，别再让我超量了</span></span><br><span class="line"><span class="string">VITE_WEATHER_KEY</span> <span class="string">=</span> <span class="string">&quot;57eaea5833ff1616cfd1ff2c4cf9b58a&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="网站顶部logo"><a href="#网站顶部logo" class="headerlink" title="网站顶部logo"></a>网站顶部logo</h2><p>网站logo需要前往<strong>根目录</strong>下的<code>index.html</code>文件的头文件处修改</p>
<p>打开<code>index.html</code>，找到<code>rel=&quot;icon&quot;</code>的<code>link</code>将<code>href</code>修改为你的头像的路径</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/images/icon/ico.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/post/6b62e9ba/image-20230527215951311.png" class="" title="image-20230527215951311">

<h2 id="footer配置"><a href="#footer配置" class="headerlink" title="footer配置"></a>footer配置</h2><p>进入<strong>根目录</strong>下的<code>src\components\Footer\index.vue</code></p>
<p>将网址链接修改为你的链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">    &gt;</span>Copyright<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;copy;</span><span class="symbol">&amp;nbsp;</span>&#123;&#123; fullYear &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://xiaoming.site&quot;</span>&gt;</span>小铭<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你的站点经过了备案，修改如下字段：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://beian.miit.gov.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>豫ICP备2022018134号-1&lt;/a</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<h2 id="背景图设置"><a href="#背景图设置" class="headerlink" title="背景图设置"></a>背景图设置</h2><p>进入<strong>根目录</strong>下的<code>src\js\store\index.js</code></p>
<p>在这里可以修改关于壁纸的各项设置</p>
<div class="note none blue flat"><p><strong>coverType</strong>可选<code>0-4</code>,<strong>0</strong>是默认壁纸，每次刷新从<strong>根目录</strong>下的<code>public\images</code>下随机选取一张，<strong>1</strong>是<strong>bing</strong>每日推荐壁纸，<strong>2</strong>是随机风景，<strong>3</strong>是随机<strong>二刺螈</strong>背景图</p>
</div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">innerWidth</span>: <span class="literal">null</span>, <span class="comment">// 当前窗口宽度</span></span><br><span class="line">            <span class="attr">coverType</span>: <span class="string">&quot;0&quot;</span>, <span class="comment">// 壁纸种类</span></span><br><span class="line">            <span class="attr">siteStartShow</span>: <span class="literal">true</span>, <span class="comment">// 建站日期显示</span></span><br><span class="line">            <span class="attr">musicIsOk</span>: <span class="literal">false</span>, <span class="comment">// 音乐是否加载完成</span></span><br><span class="line">            <span class="attr">musicVolume</span>: <span class="number">0</span>, <span class="comment">// 音乐音量;</span></span><br><span class="line">            <span class="attr">musicOpenState</span>: <span class="literal">false</span>, <span class="comment">// 音乐面板开启状态</span></span><br><span class="line">            <span class="attr">backgroundShow</span>: <span class="literal">false</span>, <span class="comment">// 壁纸展示状态</span></span><br><span class="line">            <span class="attr">boxOpenState</span>: <span class="literal">false</span>, <span class="comment">// 盒子开启状态</span></span><br><span class="line">            <span class="attr">mobileOpenState</span>: <span class="literal">false</span>, <span class="comment">// 移动端开启状态</span></span><br><span class="line">            <span class="attr">mobileFuncState</span>: <span class="literal">false</span>, <span class="comment">// 移动端功能区开启状态</span></span><br><span class="line">            <span class="attr">setOpenState</span>: <span class="literal">false</span>, <span class="comment">// 设置页面开启状态</span></span><br><span class="line">            <span class="attr">playerState</span>: <span class="literal">false</span>, <span class="comment">// 当前播放状态</span></span><br><span class="line">            <span class="attr">playerTitle</span>: <span class="literal">null</span>, <span class="comment">// 当前播放歌曲名</span></span><br><span class="line">            <span class="attr">playerArtist</span>: <span class="literal">null</span>, <span class="comment">// 当前播放歌手名</span></span><br><span class="line">            <span class="attr">playerLrc</span>: <span class="string">&quot;歌词加载中&quot;</span>, <span class="comment">// 当前播放歌词</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>背景图可以在前端直接设置，点击左侧留言，再点击时间胶囊右侧的设置按钮。</p>
<div class="note danger flat"><p>建议<strong>coverType</strong>默认为0，使用本地壁纸页面的打开速度会快很多</p>
</div>

<img src="/post/6b62e9ba/image-20230527225556592.png" class="" title="image-20230527225556592">



<div class="note none blue flat"><p>如果需要更换本地壁纸，你可以打开<strong>根目录</strong>下的<code>src\components\Background\index.vue</code></p>
</div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">changeBg</span> = (<span class="params">type</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (type == <span class="number">0</span>) &#123;</span><br><span class="line">    bgUrl.<span class="property">value</span> = <span class="string">`/images/background<span class="subst">$&#123;<span class="built_in">Math</span>.floor(</span></span></span><br><span class="line"><span class="subst"><span class="string">      <span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    )&#125;</span>.webp`</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">    bgUrl.<span class="property">value</span> = <span class="string">&quot;https://api.dujin.org/bing/1920.php&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">    bgUrl.<span class="property">value</span> = <span class="string">&quot;https://api.btstu.cn/sjbz/api.php?lx=fengjing&amp;format=images&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">3</span>) &#123;</span><br><span class="line">    bgUrl.<span class="property">value</span> = <span class="string">&quot;https://www.dmoe.cc/random.php&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>默认壁纸是随机生成<strong>0-10</strong>的数，每次刷新随机抽取一张图片</p>
<p>如果你要添加壁纸，需要修改<code>Math.random() * 10 + 1</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>() * 你的图片数 + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>然后将新壁纸到<strong>根目录</strong>下的<code>public\images</code>文件夹中，修改图片名称为<code>background$&#123;图片序号&#125;.webp</code>，这里的后缀名<code>.webp</code>根据你文件夹中的图片后缀修改</p>
<p>这里是我的图片文件夹</p>
<img src="/post/6b62e9ba/image-20230528133015854.png" class="" title="image-20230528133015854">

<h2 id="网站链接配置"><a href="#网站链接配置" class="headerlink" title="网站链接配置"></a>网站链接配置</h2><p>进入<strong>根目录</strong>下的<code>src\components\Links\index.vue</code></p>
<p>在<code>linksData</code>数组对象中增加或减少你的站点，建议不要超过六个，否则需要重设样式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> linksData = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">icon</span>: <span class="title class_">Blog</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;博客&quot;</span>,</span><br><span class="line">    <span class="attr">link</span>: <span class="string">&quot;https://blog.imsyy.top/&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">icon</span>: <span class="title class_">Cloud</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;网盘&quot;</span>,</span><br><span class="line">    <span class="attr">link</span>: <span class="string">&quot;https://pan.imsyy.top/&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">icon</span>: <span class="title class_">CompactDisc</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;音乐&quot;</span>,</span><br><span class="line">    <span class="attr">link</span>: <span class="string">&quot;https://music.imsyy.top/&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">icon</span>: <span class="title class_">Compass</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;起始页&quot;</span>,</span><br><span class="line">    <span class="attr">link</span>: <span class="string">&quot;https://nav.imsyy.top/&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">icon</span>: <span class="title class_">Book</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;网址集&quot;</span>,</span><br><span class="line">    <span class="attr">link</span>: <span class="string">&quot;https://web.imsyy.top/&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">icon</span>: <span class="title class_">Fire</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;今日热榜&quot;</span>,</span><br><span class="line">    <span class="attr">link</span>: <span class="string">&quot;https://hot.imsyy.top/&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>如果你需要更改链接图标，打开<strong>根目录</strong>下的<code>node_modules\@vicons\fa\es\index.d.ts</code>，找到你需要的图标然后<code>import</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Link</span>,</span><br><span class="line">  <span class="title class_">Blog</span>,</span><br><span class="line">  <span class="title class_">CompactDisc</span>,</span><br><span class="line">  <span class="title class_">Cloud</span>,</span><br><span class="line">  <span class="title class_">Compass</span>,</span><br><span class="line">  <span class="title class_">Book</span>,</span><br><span class="line">  <span class="title class_">Fire</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@vicons/fa&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>修改一下链接地址就可以得到一个简洁好看的博客首页啦</p>
</font>
]]></content>
      <categories>
        <category>imsyy</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>imsyy</tag>
        <tag>vercel</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/post/d87f7e0c.html</url>
    <content><![CDATA[<div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">111</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p>
<p>1</p>
<p>1</p>
<p>1</p>
<p>1</p>
<p>1</p>
<p>1</p>
<p>1</p>
<p>1</p>
<p>1</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<hr>
<div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p>
</div></div><div class='timeline-item-content'><p>这是测试页面</p>
</div></div></div>



<div class="flink"><div class="flink-name">友情链接</div><div class="flink-desc">那些人，那些事</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://jerryc.me/" title="JerryC" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://jerryc.me/img/avatar.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="JerryC" />
              </div>
              <div class="flink-item-name">JerryC</div> 
              <div class="flink-item-desc" title="今日事,今日毕">今日事,今日毕</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://hexo.io/zh-tw/" title="Hexo" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Hexo" />
              </div>
              <div class="flink-item-name">Hexo</div> 
              <div class="flink-item-desc" title="快速、简单且强大的网志框架">快速、简单且强大的网志框架</div>
            </a>
          </div></div></div>

<div class="abc-music-sheet">X:1
T:alternate heads
M:C
L:1/8
U:n=!style=normal!
K:C treble style=rhythm
&quot;Am&quot; BBBB B2 B&gt;B | &quot;Dm&quot; B2 B/B/B &quot;C&quot; B4 |&quot;Am&quot; B2 nGnB B2 nGnA | &quot;Dm&quot; nDB/B/ nDB/B/ &quot;C&quot; nCB/B/ nCB/B/ |B8| B0 B0 B0 B0 |]
%%text This translates to:
[M:C][K:style=normal]
[A,EAce][A,EAce][A,EAce][A,EAce] [A,EAce]2 [A,EAce]&gt;[A,EAce] |[DAdf]2 [DAdf]/[DAdf]/[DAdf] [CEGce]4 |[A,EAce]2 GA [A,EAce] GA |D[DAdf]/[DAdf]/ D[DAdf]/[DAdf]/ C [CEGce]/[CEGce]/ C[CEGce]/[CEGce]/ |[CEGce]8 | [CEGce]2 [CEGce]2 [CEGce]2 [CEGce]2 |]
GAB2 !style=harmonic![gb]4|GAB2 [K: style=harmonic]gbgb|
[K: style=x]
C/A,/ C/C/E C/zz2|
w:Rock-y did-nt like that</div>




<p>作者: Jerry<br>連結: <a href="https://butterfly.js.org/posts/4aa8abbe/#Tabs">https://butterfly.js.org/posts/4aa8abbe/#Tabs</a><br>來源: Butterfly<br>著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。</p>
]]></content>
  </entry>
  <entry>
    <title>微信小程序的组件间通信</title>
    <url>/post/18c75403.html</url>
    <content><![CDATA[<font face="ZhuZiAWan" size=3>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note none blue flat"><p>在微信小程序的组件通信中有3种方式：</p>
</div>

<ol>
<li><h3 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h3><ul>
<li>用于父组件向子组件的指定属性设置数据，但仅能设置<strong>JSON</strong>兼容的格式数据</li>
</ul>
</li>
<li><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ul>
<li>用于子组件向父组件传递数据，可以传递任意数据</li>
</ul>
</li>
<li><h3 id="获取组件实例"><a href="#获取组件实例" class="headerlink" title="获取组件实例"></a>获取组件实例</h3><ul>
<li>父组件还可以通过<code>this.selectComponent()</code>获取子组件实例对象</li>
<li>这样就可以直接访问子组件的任意数据和方法</li>
</ul>
</li>
</ol>
<p>总而言之也就是父传子和子传父两种，这是核心知识但比较绕，于是写篇博客记录下方便之后的使用和记忆。</p>
<h1 id="属性绑定-父传子"><a href="#属性绑定-父传子" class="headerlink" title="属性绑定(父传子)"></a>属性绑定(父传子)</h1><h2 id="准备例子"><a href="#准备例子" class="headerlink" title="准备例子"></a>准备例子</h2><p>此时我们有一个子组件<code>test5(components)</code>和一个父组件<code>home(pages)</code>，在父组件定义了一个按钮和事件<code>bindtap()</code>,每当点击按钮时，<strong>count</strong>的值会被动态+1，现在我们需要将该<strong>count</strong>值传入子组件<code>test5</code>中，让按钮点击时两个页面的<strong>count</strong>都动态+1</p>
<p><strong>子组件：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>父组件：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>父组件中count值是:&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>------------------------------<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-test5</span>&gt;</span><span class="tag">&lt;/<span class="name">my-test5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;btnAdd&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="title function_">btnAdd</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>:<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p><strong>此时页面的效果：</strong></p>
<p><img src="/post/18c75403/1.png" alt="image-20230526175003759"></p>
<p>这时候点击按钮只有父组件的<strong>count</strong>会+1，因为子组件中没有定义<strong>count</strong>这个值，我们可以通过<strong>properties</strong>结点给子组件传入<strong>count</strong></p>
<p>在<code>test5.js</code>的<strong>Component</strong>下添加<code>properties</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>:<span class="title class_">Number</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><strong>count</strong>的形式也可以为一个对象如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这里的<strong>value</strong>是给传入的<strong>count</strong>设置一个默认值，例子中的<strong>count</strong>随父组件动态变化，不需要默认值，所以这里简写为数据类型的形式就行。</p>
<p>随后在<code>home</code>页面的组件标签中添加属性<code>count=&quot;&#123;&#123;count&#125;&#125;&quot;</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>父组件中count值是:&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>------------------------------<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-test5</span> <span class="attr">count</span>=<span class="string">&quot;&#123;&#123;count&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-test5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;btnAdd&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样就完成了父组件给子组件传值。</p>
<hr>
<h1 id="事件绑定-子传父"><a href="#事件绑定-子传父" class="headerlink" title="事件绑定(子传父)"></a>事件绑定(子传父)</h1><h2 id="准备例子-1"><a href="#准备例子-1" class="headerlink" title="准备例子"></a>准备例子</h2><p>取上述例子，将按钮和方法都移到子组件中，此时子组件中定义了<strong>count</strong>及其方法而父组件没有，我们需要将子组件的<strong>count</strong>传入父组件</p>
<div class="note danger flat"><p><font color="red" size=4>注意</font>：compnents页面的方法只能写在methods中</p>
</div>

<p>注意：</p>
<p><strong>子组件：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;btnAdd&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">btnAdd</span>(<span class="params"></span>)&#123;</span><br><span class="line">  	<span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">  		<span class="attr">count</span>:<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">  	&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>父组件：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>父组件中count值是:&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>------------------------------<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-test5</span> <span class="attr">count</span>=<span class="string">&quot;&#123;&#123;count&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-test5</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><h3 id="在父组件中js文件定义一个自定义方法syncCount-："><a href="#在父组件中js文件定义一个自定义方法syncCount-：" class="headerlink" title="在父组件中js文件定义一个自定义方法syncCount()："></a>在<font color="#c34c60">父组件</font>中<strong>js文件</strong>定义一个自定义方法<code>syncCount()</code>：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="title function_">syncCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sycnCount&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="改写父组件的wxml，添加自定义事件的函数引用："><a href="#改写父组件的wxml，添加自定义事件的函数引用：" class="headerlink" title="改写父组件的wxml，添加自定义事件的函数引用："></a>改写<font color="#c34c60">父组件</font>的<strong>wxml</strong>，添加自定义事件的函数引用：</h3><div class="note none blue flat"><p><code>bind:sync=&quot;syncCount&quot;</code>中的sync是自定义事件的名称</p>
</div>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>父组件中count值是:&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>------------------------------<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-test5</span> <span class="attr">count</span>=<span class="string">&quot;&#123;&#123;count&#125;&#125;&quot;</span> <span class="attr">bind:sync</span>=<span class="string">&quot;syncCount&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-test5</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="改写子组件的btnAdd-方法，使点击按钮触发btnAdd-的同时也触发自定义事件："><a href="#改写子组件的btnAdd-方法，使点击按钮触发btnAdd-的同时也触发自定义事件：" class="headerlink" title="改写子组件的btnAdd()方法，使点击按钮触发btnAdd()的同时也触发自定义事件："></a>改写<font color="#c34c60">子组件</font>的<code>btnAdd()</code>方法，使点击按钮触发<code>btnAdd()</code>的同时也触发自定义事件：</h3><div class="note warning no-icon flat"><p><code>this.triggerEvent()</code>可以用于调用自定义事件，形式为this.triggerEvent(‘自定义事件名称”,{ 参数对象})</p>
</div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">btnAdd</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>:<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">//触发自定义事件</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">triggerEvent</span>(<span class="string">&#x27;sync&#x27;</span>,&#123;<span class="attr">value</span>:<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span>&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="改写父组件的js："><a href="#改写父组件的js：" class="headerlink" title="改写父组件的js："></a>改写<font color="#c34c60">父组件</font>的<strong>js</strong>：</h3></li>
</ol>
<p>设置一个接受参数，此时控制台打印出来的<strong>e</strong>就是当前是自定义事件<strong>sync</strong>的属性,<strong>e.detail.value</strong>就是我们通过自定义事件传入父组件的值，即当前<strong>count</strong>的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">syncCount</span>(<span class="params">e</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">detail</span>.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，我们可以将接收到的值同步到父组件的<strong>data</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">syncCount</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>:e.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>这样就可以愉快地在父组件中使用<strong>count</strong>了</p>
<hr>
<h1 id="获取组件实例-1"><a href="#获取组件实例-1" class="headerlink" title="获取组件实例"></a>获取组件实例</h1><p>可在父组件里调用**this. selectComponent(“id或class选择器”)**，获取子组件的实例对象,从而直接访问子组件的任意数据和方法。调用时需要传入一个选择器，例如this.selectComponent(“.my-component”)。</p>
<p>如果只是用于传值，该方法是不常用的。所以这里不多赘述，使用一个简单的例子来展示。</p>
<h3 id="在父组件的wxml页面引用子组件，并给子组件的标签加上一个类名或一个id"><a href="#在父组件的wxml页面引用子组件，并给子组件的标签加上一个类名或一个id" class="headerlink" title="在父组件的wxml页面引用子组件，并给子组件的标签加上一个类名或一个id"></a>在父组件的wxml页面引用子组件，并给子组件的标签加上一个类名或一个id</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-test5</span> <span class="attr">class</span>=<span class="string">&quot;customA&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-test5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;getChild&quot;</span>&gt;</span>获取子组件实例<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="在父组件的js文件中调用getChild"><a href="#在父组件的js文件中调用getChild" class="headerlink" title="在父组件的js文件中调用getChild()"></a>在父组件的js文件中调用getChild()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="title function_">getChild</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">//下面的参数不能选择标签选择器&#x27;my-test5&#x27;，不然返回的是null</span></span><br><span class="line">      <span class="keyword">const</span> child = <span class="variable language_">this</span>.<span class="title function_">selectComponent</span>(<span class="string">&#x27;.customA&#x27;</span>)</span><br><span class="line">      <span class="comment">// 或者</span></span><br><span class="line">      <span class="comment">// const child = this.selectComponent(&#x27;#cA&#x27;)</span></span><br><span class="line">      child.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>:child.<span class="property">data</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p>这样很轻松的就能获取到子组件中<strong>data</strong>的值</p>
<div class="note red icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p><font color='red' size=4>注意：</font><font color='#d67b7f'>selectComponent(‘选择器’)里的选择器只能选择类选择器和id选择器，如果选择标签选择器会返回null</font></p>
</div>

<p><strong></font></strong></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
</search>
